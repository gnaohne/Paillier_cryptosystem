// auto key = keyGen();

// BigInteger a(18);
// cout << "a = " << a.toString() << endl;

// BigInteger c = a << 212;
// cout << "c = " << c.toString() << endl;

// BigInteger a("111101011001011000110111111111011001110001010001100000101110000");
// BigInteger b(4);
// BigInteger temp = b << 62;
// cout << "a = " << a.toString() << endl;
// cout << "temp = " << temp.toString() << endl;

// BigInteger d = a - temp;
// cout << "d = " << d.toString() << endl;

// cout << c.toString() << endl;


// test case cá»§a tháº§y
BigInteger p(13);
BigInteger q(17);
BigInteger n = p * q;

BigInteger d = lcm(p - 1, q - 1);
BigInteger m(123);

BigInteger g = random_in_Zn2(n);

BigInteger c1 = encrypt(m, n, g);

cout << "c1: " << c1.toDecimal() << endl;

BigInteger m_dec1 = decrypt(c1, n, d, g);

BigInteger c2 = encrypt(m, n, g);

cout << "c2: " << c2.toDecimal() << endl;

BigInteger m_dec2 = decrypt(c2, n, d, g);


// bug 

p: 1100100011100100000010000111111111110100101001110110110001001011
14475704447934098507
q: 1110011110101101011100110011111101110101011000011101001101101011
16694126110121775979
n: 10110101110011011110000000110101011100000100011111110110011100011110010000100101100100111000010010001111101001110001010001011001
241659235586662562525882547143172363353
d: 1011010111001101111000000011010101110000010001111111011001110000001100111001010000010111110001010010010110011101110101001010010
120829617793331281247356358292558244434
g: 1011101001100000000001000010011101000011110110010000011110101110101000110100010000010001101000001011001111101000001010100110111010001011110000001111000001010110000011100111100000000101100011011000110010011111100011110011011011101010101101000111000010010011
84299835820274784823021678865194354987626898338894378054346703995422301778067

r: 10011111110101010111111000110001000011011101110010100101110101010011010001010010101010000110010100101011010010001001101011001001
212455770030749617317397404234000407241

n^2: 1000000100011100110001001001110001101010101110010010010101100011010111010101011011101101000100000011011100110011111001111011001110001100100100000000000010111001001011110010110110100110101110101100000000000001010001111000111011111011101111000000011011110001
58399186144330077470461850354375986714807042284322683992668525810083457402609

m : 1001
9

g^m mod n^2 : 2347652669691809348287623269975700221663826804794788965715587449762823294258

r^n (mod n^2): 25106423871846721837730813982694827013697087247243405922010747981151278810103

c: 110010100001100111001001010010100010011011001001011110100011111100000000101100110010101001000011011101100001000111101000000110101001110111001110110100010110001110111000010001011001101100110001011110001001011011101110110101111100001111000001001111101000010
c: 45706377920287889230723107609030598763371356985421091289988876725452978298690

g^d (mod n^2): 57278215972944216667002405501885864302771387420860809989892357418562109701990

L: 237020595690841720274427117845967032813


Lx + ny = 1

    // string input_message;
    // cout << "Enter a message: ";
    // getline(cin, input_message);
    
    // string plantext = string_to_binary(input_message);

    // plantext = "1" + plantext;

    // BigInteger mess(plantext);

    // cout << "--------------------------------------------------------" << endl;
    // cout << "Generating key..." << endl;
    // auto key = keyGen();
  
    // auto start = std::chrono::high_resolution_clock::now();  
    // cout << "--------------------------------------------------------" << endl;
    // cout << "Encrypting..." << endl;
    // BigInteger c = encrypt(mess, key.n, key.g);
    // cout << "Encrypted message: " << c.toString() << endl;
    // cout << "c: " << c.toDecimal() <<endl;

    // cout << "--------------------------------------------------------" << endl;
    // cout << "Decrypting..." << endl;
    // BigInteger m = decrypt(c, key.n, key.d, key.mu);

    // string message = m.toString();
    // message = message.substr(1);

    // string decrypted_message = binary_to_string(message);

    // cout << "Decrypted message: " << decrypted_message << endl;
    // cout << "Original message : " << input_message << endl;

    // auto end = std::chrono::high_resolution_clock::now();
    // std::chrono::duration<double> duration = end - start;
    // cout << "Time: " << duration.count() << "s" << endl;

    // string input;
    // cout << "Enter a number: ";
    // getline(cin, input);

    // RealNumber m(input);

    // cout << "m = " << m.toDecimalString() << endl;

    // cout << "--------------------------------------------------------" << endl;
    // cout << "Generating key..." << endl;
    // auto key = keyGen();
    
    // cout << "--------------------------------------------------------" << endl;
    // cout << "Encrypting..." << endl;
    // RealNumber c = encrypt(m, key.n, key.g);
    // cout << "Encrypt : c = " << c.toDecimalString() << endl;

    // cout << "--------------------------------------------------------" << endl;
    // cout << "Decrypting..." << endl;
    // RealNumber m_decrypt = decrypt(c, key.n, key.d, key.mu);
    // cout << "Decrypt : m = " << m_decrypt.toDecimalString() << endl;